{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Example of using interactive Python widgets\n",
    "\n",
    "This example demonstrates how to create basic interactive Python widgets and animations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from mpl_toolkits.mplot3d import axes3d\n",
    "import matplotlib.pyplot as plt\n",
    "from numpy.random import rand\n",
    "from IPython.display import HTML, display\n",
    "from matplotlib import animation\n",
    "\n",
    "m = rand(3,3) # m is an array of (x,y,z) coordinate triplets\n",
    "\n",
    "fig = plt.figure()\n",
    "ax = fig.add_subplot(111, projection='3d')\n",
    "\n",
    "for i in range(len(m)): # plot each point + it's index as text above\n",
    "  x = m[i,0]\n",
    "  y = m[i,1]\n",
    "  z = m[i,2]\n",
    "  label = i\n",
    "  ax.scatter(x, y, z, color='b')\n",
    "  ax.text(x, y, z, '%s' % (label), size=20, zorder=1, color='k')\n",
    "\n",
    "ax.set_xlabel('x')\n",
    "ax.set_ylabel('y')\n",
    "ax.set_zlabel('z')\n",
    "\n",
    "def animate(frame):\n",
    "  ax.view_init(30, frame/4)\n",
    "  return fig\n",
    "\n",
    "anim = animation.FuncAnimation(fig, animate, frames=200, interval=50)\n",
    "plt.close(fig)  # Prevents the initial still image from displaying\n",
    "display(HTML(anim.to_html5_video()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.animation as animation\n",
    "from IPython.display import HTML, display\n",
    "\n",
    "# Create a figure and axis\n",
    "fig, ax = plt.subplots()\n",
    "x = np.linspace(0, 2*np.pi, 100)\n",
    "line, = ax.plot(x, np.sin(x))\n",
    "\n",
    "# Animation function\n",
    "def animate(i):\n",
    "    line.set_ydata(np.sin(x + i/10.0))  # Update the data\n",
    "    return line,\n",
    "\n",
    "# Create the animation\n",
    "ani = animation.FuncAnimation(fig, animate, frames=100, interval=20, blit=True)\n",
    "plt.close(fig)  # Prevents the initial still image from displaying\n",
    "display(HTML(ani.to_jshtml()))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.19"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
