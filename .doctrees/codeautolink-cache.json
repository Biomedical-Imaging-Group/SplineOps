{
  "api/core/index": [],
  "api/core/tensorspline": [],
  "api/index": [],
  "examples/gpu_interoperability_using_cupy": [
    {
      "source": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom splineops.interpolate.tensorspline import TensorSpline\ntry:\n    import cupy as cp\n    gpu_available = cp.cuda.runtime.getDeviceCount() > 0\nexcept (ImportError, cp.cuda.runtime.CUDARuntimeError, NameError):\n    gpu_available = False\n    cp = np  # Fall back to NumPy if CuPy is not available",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "splineops",
            "interpolate",
            "tensorspline"
          ],
          "code_str": "splineops.interpolate.tensorspline",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "splineops.interpolate.tensorspline"
        },
        {
          "import_components": [
            "splineops",
            "interpolate",
            "tensorspline",
            "TensorSpline"
          ],
          "code_str": "TensorSpline",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "splineops.interpolate.tensorspline.TensorSpline"
        },
        {
          "import_components": [
            "ImportError"
          ],
          "code_str": "ImportError",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "ImportError"
        },
        {
          "import_components": [
            "NameError"
          ],
          "code_str": "NameError",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "NameError"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "np",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "cp",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "numpy"
        }
      ],
      "example": {
        "document": "examples/gpu_interoperability_using_cupy",
        "ref_id": "GPU-Interoperability-using-CuPy-and-Tensor-Spline-Interpolation",
        "headings": [
          "GPU Interoperability using CuPy and Tensor Spline Interpolation"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "dtype = \"float32\"",
      "names": [],
      "example": {
        "document": "examples/gpu_interoperability_using_cupy",
        "ref_id": "Data-type",
        "headings": [
          "GPU Interoperability using CuPy and Tensor Spline Interpolation",
          "Data type"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "nx, ny = 2, 5\nxmin, xmax = -3.1, +1\nymin, ymax = 2, 6.5\nxx = np.linspace(xmin, xmax, nx, dtype=dtype)\nyy = np.linspace(ymin, ymax, ny, dtype=dtype)\ncoordinates = xx, yy\nprng = np.random.default_rng(seed=5250)\ndata = prng.standard_normal(size=tuple(c.size for c in coordinates))\ndata = np.ascontiguousarray(data, dtype=dtype)",
      "names": [
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "default_rng"
          ],
          "code_str": "np.random.default_rng",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.random.default_rng"
        },
        {
          "import_components": [
            "tuple"
          ],
          "code_str": "tuple",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "tuple"
        },
        {
          "import_components": [
            "numpy",
            "ascontiguousarray"
          ],
          "code_str": "np.ascontiguousarray",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "numpy.ascontiguousarray"
        }
      ],
      "example": {
        "document": "examples/gpu_interoperability_using_cupy",
        "ref_id": "Create-random-data-samples-and-corresponding-coordinates",
        "headings": [
          "GPU Interoperability using CuPy and Tensor Spline Interpolation",
          "Create random data samples and corresponding coordinates"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "bases = \"bspline3\"\nmodes = \"mirror\"",
      "names": [],
      "example": {
        "document": "examples/gpu_interoperability_using_cupy",
        "ref_id": "Tensor-spline-bases-and-modes",
        "headings": [
          "GPU Interoperability using CuPy and Tensor Spline Interpolation",
          "Tensor spline bases and modes"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "data_np = data\ncoordinates_np = coordinates\ntensor_spline_np = TensorSpline(\n    data=data_np, coordinates=coordinates_np, bases=bases, modes=modes\n)",
      "names": [
        {
          "import_components": [
            "splineops",
            "interpolate",
            "tensorspline",
            "TensorSpline"
          ],
          "code_str": "TensorSpline",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "splineops.interpolate.tensorspline.TensorSpline"
        },
        {
          "import_components": [
            "splineops",
            "interpolate",
            "tensorspline",
            "TensorSpline",
            "()"
          ],
          "code_str": "tensor_spline_np",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "splineops.interpolate.tensorspline.TensorSpline"
        }
      ],
      "example": {
        "document": "examples/gpu_interoperability_using_cupy",
        "ref_id": "Create-tensor-spline-from-NumPy-data",
        "headings": [
          "GPU Interoperability using CuPy and Tensor Spline Interpolation",
          "Create tensor spline from NumPy data"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "if gpu_available:\n    data_cp = cp.asarray(data)\n    coordinates_cp = cp.asarray(xx), cp.asarray(yy)\n    tensor_spline_cp = TensorSpline(\n        data=data_cp, coordinates=coordinates_cp, bases=bases, modes=modes\n    )\nelse:\n    data_cp = data\n    coordinates_cp = xx, yy\n    tensor_spline_cp = tensor_spline_np  # Fallback to NumPy tensor spline",
      "names": [
        {
          "import_components": [
            "numpy",
            "asarray"
          ],
          "code_str": "cp.asarray",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "numpy.asarray"
        },
        {
          "import_components": [
            "numpy",
            "asarray"
          ],
          "code_str": "cp.asarray",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "numpy.asarray"
        },
        {
          "import_components": [
            "numpy",
            "asarray"
          ],
          "code_str": "cp.asarray",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "numpy.asarray"
        },
        {
          "import_components": [
            "splineops",
            "interpolate",
            "tensorspline",
            "TensorSpline"
          ],
          "code_str": "TensorSpline",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "splineops.interpolate.tensorspline.TensorSpline"
        },
        {
          "import_components": [
            "splineops",
            "interpolate",
            "tensorspline",
            "TensorSpline",
            "()"
          ],
          "code_str": "tensor_spline_cp",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "splineops.interpolate.tensorspline.TensorSpline"
        },
        {
          "import_components": [
            "splineops",
            "interpolate",
            "tensorspline",
            "TensorSpline",
            "()"
          ],
          "code_str": "tensor_spline_np",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "splineops.interpolate.tensorspline.TensorSpline"
        },
        {
          "import_components": [
            "splineops",
            "interpolate",
            "tensorspline",
            "TensorSpline",
            "()"
          ],
          "code_str": "tensor_spline_cp",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "splineops.interpolate.tensorspline.TensorSpline"
        }
      ],
      "example": {
        "document": "examples/gpu_interoperability_using_cupy",
        "ref_id": "Create-tensor-spline-from-CuPy-data-for-GPU-computations",
        "headings": [
          "GPU Interoperability using CuPy and Tensor Spline Interpolation",
          "Create tensor spline from CuPy data for GPU computations"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "dx = (xx[-1] - xx[0]) / (nx - 1)\ndy = (yy[-1] - yy[0]) / (ny - 1)\npad_fct = 1.1\npx = pad_fct * nx * dx\npy = pad_fct * ny * dy\neval_xx = np.linspace(xx[0] - px, xx[-1] + px, 100 * nx)\neval_yy = np.linspace(yy[0] - py, yy[-1] + py, 100 * ny)",
      "names": [
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.linspace"
        }
      ],
      "example": {
        "document": "examples/gpu_interoperability_using_cupy",
        "ref_id": "Create-evaluation-coordinates-(extended-and-oversampled-in-this-case)",
        "headings": [
          "GPU Interoperability using CuPy and Tensor Spline Interpolation",
          "Create evaluation coordinates (extended and oversampled in this case)"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "eval_coords_np = eval_xx, eval_yy\ndata_eval_np = tensor_spline_np(coordinates=eval_coords_np)",
      "names": [
        {
          "import_components": [
            "splineops",
            "interpolate",
            "tensorspline",
            "TensorSpline",
            "()"
          ],
          "code_str": "tensor_spline_np",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "splineops.interpolate.tensorspline.TensorSpline"
        }
      ],
      "example": {
        "document": "examples/gpu_interoperability_using_cupy",
        "ref_id": "Evaluate-using-NumPy",
        "headings": [
          "GPU Interoperability using CuPy and Tensor Spline Interpolation",
          "Evaluate using NumPy"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "if gpu_available:\n    eval_coords_cp = cp.asarray(eval_xx), cp.asarray(eval_yy)\n    data_eval_cp = tensor_spline_cp(coordinates=eval_coords_cp)\nelse:\n    eval_coords_cp = eval_coords_np\n    data_eval_cp = data_eval_np  # Fallback to NumPy evaluation",
      "names": [
        {
          "import_components": [
            "numpy",
            "asarray"
          ],
          "code_str": "cp.asarray",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "numpy.asarray"
        },
        {
          "import_components": [
            "numpy",
            "asarray"
          ],
          "code_str": "cp.asarray",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "numpy.asarray"
        },
        {
          "import_components": [
            "splineops",
            "interpolate",
            "tensorspline",
            "TensorSpline",
            "()"
          ],
          "code_str": "tensor_spline_cp",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "splineops.interpolate.tensorspline.TensorSpline"
        }
      ],
      "example": {
        "document": "examples/gpu_interoperability_using_cupy",
        "ref_id": "Evaluate-using-CuPy",
        "headings": [
          "GPU Interoperability using CuPy and Tensor Spline Interpolation",
          "Evaluate using CuPy"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "if gpu_available:\n    data_eval_cp_np = data_eval_cp.get()  # Convert CuPy array to NumPy array\n    abs_diff = np.abs(data_eval_cp_np - data_eval_np)\n    mse = np.mean((data_eval_cp_np - data_eval_np) ** 2)\nelse:\n    abs_diff = np.abs(data_eval_cp - data_eval_np)\n    mse = np.mean((data_eval_cp - data_eval_np) ** 2)\nprint(f\"Maximum absolute difference: {np.max(abs_diff)}\")\nprint(f\"Mean square error: {mse}\")",
      "names": [
        {
          "import_components": [
            "numpy",
            "mean"
          ],
          "code_str": "np.mean",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "numpy.mean"
        },
        {
          "import_components": [
            "numpy",
            "mean"
          ],
          "code_str": "np.mean",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.mean"
        },
        {
          "import_components": [
            "numpy",
            "max"
          ],
          "code_str": "np.max",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "numpy.max"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "examples/gpu_interoperability_using_cupy",
        "ref_id": "Compute-difference",
        "headings": [
          "GPU Interoperability using CuPy and Tensor Spline Interpolation",
          "Compute difference"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "fig, axes = plt.subplots(\n    nrows=1, ncols=3, sharex=\"all\", sharey=\"all\", layout=\"constrained\"\n)\nax = axes[0]\nax.imshow(data_eval_np.T)\nax.set_title(\"NumPy\")\nif gpu_available:\n    data_eval_cp_np = data_eval_cp.get()  # Ensure we have a NumPy array\n    ax = axes[1]\n    ax.set_title(\"CuPy\")\n    ax.imshow(data_eval_cp_np.T)\nelse:\n    ax = axes[1]\n    ax.set_title(\"CuPy (not available)\")\n    ax.imshow(data_eval_np.T)\nax = axes[2]\nax.set_title(f\"Absolute difference\\n(MSE: {mse:.2e})\")\nax.imshow(abs_diff.T)\n\nplt.show()",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "show"
          ],
          "code_str": "plt.show",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.show"
        }
      ],
      "example": {
        "document": "examples/gpu_interoperability_using_cupy",
        "ref_id": "Plot-results",
        "headings": [
          "GPU Interoperability using CuPy and Tensor Spline Interpolation",
          "Plot results"
        ]
      },
      "doc_lineno": null
    }
  ],
  "examples/image_rotation_2D": [
    {
      "source": "#!/usr/bin/env python3\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import ndimage, datasets\nfrom IPython.display import HTML, display\nfrom matplotlib import animation\n\nfrom splineops.interpolate.tensorspline import TensorSpline",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "scipy"
          ],
          "code_str": "scipy",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "scipy"
        },
        {
          "import_components": [
            "scipy",
            "ndimage"
          ],
          "code_str": "ndimage",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "scipy.ndimage"
        },
        {
          "import_components": [
            "scipy",
            "datasets"
          ],
          "code_str": "datasets",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "scipy.datasets"
        },
        {
          "import_components": [
            "matplotlib"
          ],
          "code_str": "matplotlib",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_from",
          "resolved_location": "matplotlib"
        },
        {
          "import_components": [
            "matplotlib",
            "animation"
          ],
          "code_str": "animation",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_target",
          "resolved_location": "matplotlib.animation"
        },
        {
          "import_components": [
            "splineops",
            "interpolate",
            "tensorspline"
          ],
          "code_str": "splineops.interpolate.tensorspline",
          "lineno": 8,
          "end_lineno": 8,
          "context": "import_from",
          "resolved_location": "splineops.interpolate.tensorspline"
        },
        {
          "import_components": [
            "splineops",
            "interpolate",
            "tensorspline",
            "TensorSpline"
          ],
          "code_str": "TensorSpline",
          "lineno": 8,
          "end_lineno": 8,
          "context": "import_target",
          "resolved_location": "splineops.interpolate.tensorspline.TensorSpline"
        }
      ],
      "example": {
        "document": "examples/image_rotation_2D",
        "ref_id": "2D-Image-Rotation-Animation",
        "headings": [
          "2D Image Rotation Animation"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "def rotate_image_splineops(image, angle, degree=3, mode=\"zero\"):\n    \"\"\"\n    Rotate an image by a specified angle using SplineOps' TensorSpline method.\n\n    Parameters:\n    - image: The input image as a 2D numpy array.\n    - angle: The rotation angle in degrees.\n    - degree: The degree of the spline (0-7).\n    - mode: The mode for handling boundaries (default is \"zero\").\n\n    Returns:\n    - Rotated image as a 2D numpy array.\n    \"\"\"\n    dtype = image.dtype\n    ny, nx = image.shape\n    xx = np.linspace(0, nx - 1, nx, dtype=dtype)\n    yy = np.linspace(0, ny - 1, ny, dtype=dtype)\n    data = np.ascontiguousarray(image, dtype=dtype)\n\n    degree = max(0, min(degree, 7))\n    basis = f\"bspline{degree}\"\n\n    tensor_spline = TensorSpline(\n        data=data, coordinates=(yy, xx), bases=basis, modes=mode\n    )\n    angle_rad = np.radians(-angle)\n    cos_angle, sin_angle = np.cos(angle_rad), np.sin(angle_rad)\n    original_center_x, original_center_y = (nx - 1) / 2.0, (ny - 1) / 2.0\n    oy, ox = np.ogrid[0:ny, 0:nx]\n    ox = ox - original_center_x\n    oy = oy - original_center_y\n\n    nx_coords = cos_angle * ox + sin_angle * oy + original_center_x\n    ny_coords = -sin_angle * ox + cos_angle * oy + original_center_y\n\n    eval_coords = ny_coords.flatten(), nx_coords.flatten()\n    interpolated_values = tensor_spline(coordinates=eval_coords, grid=False)\n    rotated_image = interpolated_values.reshape(ny, nx)\n\n    return rotated_image",
      "names": [
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "numpy",
            "ascontiguousarray"
          ],
          "code_str": "np.ascontiguousarray",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "numpy.ascontiguousarray"
        },
        {
          "import_components": [
            "min"
          ],
          "code_str": "min",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "min"
        },
        {
          "import_components": [
            "max"
          ],
          "code_str": "max",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "max"
        },
        {
          "import_components": [
            "splineops",
            "interpolate",
            "tensorspline",
            "TensorSpline"
          ],
          "code_str": "TensorSpline",
          "lineno": 23,
          "end_lineno": 23,
          "context": "none",
          "resolved_location": "splineops.interpolate.tensorspline.TensorSpline"
        },
        {
          "import_components": [
            "splineops",
            "interpolate",
            "tensorspline",
            "TensorSpline",
            "()"
          ],
          "code_str": "tensor_spline",
          "lineno": 23,
          "end_lineno": 23,
          "context": "none",
          "resolved_location": "splineops.interpolate.tensorspline.TensorSpline"
        },
        {
          "import_components": [
            "numpy",
            "radians"
          ],
          "code_str": "np.radians",
          "lineno": 26,
          "end_lineno": 26,
          "context": "none",
          "resolved_location": "numpy.radians"
        },
        {
          "import_components": [
            "numpy",
            "cos"
          ],
          "code_str": "np.cos",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "numpy.cos"
        },
        {
          "import_components": [
            "numpy",
            "sin"
          ],
          "code_str": "np.sin",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "numpy.sin"
        },
        {
          "import_components": [
            "numpy",
            "ogrid"
          ],
          "code_str": "np.ogrid",
          "lineno": 29,
          "end_lineno": 29,
          "context": "none",
          "resolved_location": "numpy.ogrid"
        },
        {
          "import_components": [
            "splineops",
            "interpolate",
            "tensorspline",
            "TensorSpline",
            "()"
          ],
          "code_str": "tensor_spline",
          "lineno": 37,
          "end_lineno": 37,
          "context": "none",
          "resolved_location": "splineops.interpolate.tensorspline.TensorSpline"
        }
      ],
      "example": {
        "document": "examples/image_rotation_2D",
        "ref_id": "Helper-Functions",
        "headings": [
          "2D Image Rotation Animation",
          "Helper Functions"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "# Load and resize the ascent image\nimage = datasets.ascent()\nsize = 500  # Resize image to 500x500 for faster computation\ndegree = 3\nimage_resized = ndimage.zoom(\n    image, (size / image.shape[0], size / image.shape[1]), order=degree\n)\n\n# Convert to float32\nimage_resized = image_resized.astype(np.float32)",
      "names": [
        {
          "import_components": [
            "scipy",
            "datasets",
            "ascent"
          ],
          "code_str": "datasets.ascent",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "scipy.datasets.ascent"
        },
        {
          "import_components": [
            "scipy",
            "ndimage",
            "zoom"
          ],
          "code_str": "ndimage.zoom",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "scipy.ndimage.zoom"
        },
        {
          "import_components": [
            "numpy",
            "float32"
          ],
          "code_str": "np.float32",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "numpy.float32"
        }
      ],
      "example": {
        "document": "examples/image_rotation_2D",
        "ref_id": "Load-and-Preprocess-Image",
        "headings": [
          "2D Image Rotation Animation",
          "Load and Preprocess Image"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "# Rotate the image by 45 degrees using spline of degree 3\nrotated_image_45 = rotate_image_splineops(image_resized, 45, degree=3)\n\n# Display the original and rotated images\nfig, ax = plt.subplots(1, 2, figsize=(12, 6))\nax[0].imshow(image_resized, cmap='gray')\nax[0].set_title('Original Image')\nax[0].axis('off')\nax[1].imshow(rotated_image_45, cmap='gray')\nax[1].set_title('Rotated Image (45 degrees, spline degree 3)')\nax[1].axis('off')\nplt.show()",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "show"
          ],
          "code_str": "plt.show",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.show"
        }
      ],
      "example": {
        "document": "examples/image_rotation_2D",
        "ref_id": "Perform-Rotation-of-45-Degrees",
        "headings": [
          "2D Image Rotation Animation",
          "Perform Rotation of 45 Degrees"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "for spline_degree in range(4):\n    if spline_degree == 2:\n        continue  # Skip degree 2 to reduce file size\n    fig, ax = plt.subplots()\n    ax.axis('off')\n    original_image = image_resized.copy()\n    image_rotated = original_image.copy()\n    image_plot = ax.imshow(image_rotated, cmap='gray')\n\n    # Animation function\n    def animate(frame):\n        global image_rotated\n        if frame > 0:\n            image_rotated = rotate_image_splineops(image_rotated, 10, degree=spline_degree)  # Rotate by 10 degrees each frame\n        image_plot.set_data(image_rotated)\n        return [image_plot]\n\n    # Create the animation\n    ani = animation.FuncAnimation(fig, animate, frames=36, interval=50, blit=True)\n    plt.close(fig)  # Prevents the initial still image from displaying\n    custom_html = ani.to_jshtml()\n\n    # Customize the HTML and JavaScript\n    custom_html = custom_html.replace(\n        '<select id=\"animation_mode\">',\n        '<select id=\"animation_mode\" style=\"display:none\">'\n    ).replace(\n        'mode: \"once\",',\n        'mode: \"loop\",'\n    )\n    custom_html = custom_html.replace(\n        'buttons.push(mode_menu);',\n        ''\n    )\n    display(HTML(f\"<h3>Animation with bspline of degree {spline_degree}</h3>\"))\n    display(HTML(custom_html))",
      "names": [
        {
          "import_components": [
            "range"
          ],
          "code_str": "range",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "range"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "matplotlib",
            "animation",
            "FuncAnimation"
          ],
          "code_str": "animation.FuncAnimation",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "matplotlib.animation.FuncAnimation"
        },
        {
          "import_components": [
            "matplotlib",
            "animation",
            "FuncAnimation",
            "()"
          ],
          "code_str": "ani",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "matplotlib.animation.FuncAnimation"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "close"
          ],
          "code_str": "plt.close",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.close"
        },
        {
          "import_components": [
            "matplotlib",
            "animation",
            "FuncAnimation",
            "()",
            "to_jshtml"
          ],
          "code_str": "ani.to_jshtml",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "matplotlib.animation.Animation.to_jshtml"
        }
      ],
      "example": {
        "document": "examples/image_rotation_2D",
        "ref_id": "Create-Animation",
        "headings": [
          "2D Image Rotation Animation",
          "Create Animation"
        ]
      },
      "doc_lineno": null
    }
  ],
  "examples/image_rotation_2D_comparison_scipy": [
    {
      "source": "#!/usr/bin/env python3\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport time\nfrom scipy import ndimage, datasets\n\nfrom splineops.interpolate.tensorspline import TensorSpline",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "time"
          ],
          "code_str": "time",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "time"
        },
        {
          "import_components": [
            "scipy"
          ],
          "code_str": "scipy",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_from",
          "resolved_location": "scipy"
        },
        {
          "import_components": [
            "scipy",
            "ndimage"
          ],
          "code_str": "ndimage",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "scipy.ndimage"
        },
        {
          "import_components": [
            "scipy",
            "datasets"
          ],
          "code_str": "datasets",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "scipy.datasets"
        },
        {
          "import_components": [
            "splineops",
            "interpolate",
            "tensorspline"
          ],
          "code_str": "splineops.interpolate.tensorspline",
          "lineno": 7,
          "end_lineno": 7,
          "context": "import_from",
          "resolved_location": "splineops.interpolate.tensorspline"
        },
        {
          "import_components": [
            "splineops",
            "interpolate",
            "tensorspline",
            "TensorSpline"
          ],
          "code_str": "TensorSpline",
          "lineno": 7,
          "end_lineno": 7,
          "context": "import_target",
          "resolved_location": "splineops.interpolate.tensorspline.TensorSpline"
        }
      ],
      "example": {
        "document": "examples/image_rotation_2D_comparison_scipy",
        "ref_id": "Example-of-doing-an-image-rotation-in-2D-and-comparing-against-Scipy",
        "headings": [
          "Example of doing an image rotation in 2D and comparing against Scipy"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "def calculate_inscribed_rectangle_bounds_from_image(image):\n    \"\"\"\n    Calculate the bounds for the largest rectangle that can be inscribed\n    within a circle, which itself is inscribed within the original image,\n    based on the image array directly.\n\n    The rectangle and the circle are centered within the original image.\n\n    Parameters:\n    - image: The input image as a 2D or 3D numpy array.\n\n    Returns:\n    - A tuple (x_min, y_min, x_max, y_max) representing the bounds for cropping.\n    \"\"\"\n    # Extract image dimensions\n    height, width = image.shape[:2]\n\n    # Calculate the radius of the inscribed circle\n    radius = min(width, height) / 2\n\n    # The side length of the square (largest inscribed rectangle in a circle)\n    side_length = radius * np.sqrt(2)\n\n    # Calculate the center of the image\n    cx, cy = width / 2, height / 2\n\n    # Calculate the bounds of the largest inscribed rectangle\n    x_min = int(cx - side_length / 2)\n    y_min = int(cy - side_length / 2)\n    x_max = int(cx + side_length / 2)\n    y_max = int(cy + side_length / 2)\n\n    return np.array([x_min, y_min, x_max, y_max])",
      "names": [
        {
          "import_components": [
            "min"
          ],
          "code_str": "min",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "min"
        },
        {
          "import_components": [
            "numpy",
            "sqrt"
          ],
          "code_str": "np.sqrt",
          "lineno": 22,
          "end_lineno": 22,
          "context": "none",
          "resolved_location": "numpy.sqrt"
        },
        {
          "import_components": [
            "int"
          ],
          "code_str": "int",
          "lineno": 28,
          "end_lineno": 28,
          "context": "none",
          "resolved_location": "int"
        },
        {
          "import_components": [
            "int"
          ],
          "code_str": "int",
          "lineno": 29,
          "end_lineno": 29,
          "context": "none",
          "resolved_location": "int"
        },
        {
          "import_components": [
            "int"
          ],
          "code_str": "int",
          "lineno": 30,
          "end_lineno": 30,
          "context": "none",
          "resolved_location": "int"
        },
        {
          "import_components": [
            "int"
          ],
          "code_str": "int",
          "lineno": 31,
          "end_lineno": 31,
          "context": "none",
          "resolved_location": "int"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 33,
          "end_lineno": 33,
          "context": "none",
          "resolved_location": "numpy.array"
        }
      ],
      "example": {
        "document": "examples/image_rotation_2D_comparison_scipy",
        "ref_id": "Calculate-Inscribed-Rectangle-Bounds-from-Image",
        "headings": [
          "Example of doing an image rotation in 2D and comparing against Scipy",
          "Calculate Inscribed Rectangle Bounds from Image"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "def crop_image_to_bounds(image, bounds):\n    \"\"\"\n    Crop an image to the specified bounds.\n\n    Parameters:\n    - image: The input image as a 2D numpy array.\n    - bounds: An array of (x_min, y_min, x_max, y_max) defining the crop bounds,\n              where these values are absolute pixel coordinates in the image.\n\n    Returns:\n    - Cropped image as a 2D numpy array.\n    \"\"\"\n    x_min, y_min, x_max, y_max = bounds\n    return image[y_min:y_max, x_min:x_max]",
      "names": [],
      "example": {
        "document": "examples/image_rotation_2D_comparison_scipy",
        "ref_id": "Crop-Image-to-Bounds",
        "headings": [
          "Example of doing an image rotation in 2D and comparing against Scipy",
          "Crop Image to Bounds"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "def calculate_snr(original, modified):\n    \"\"\"\n    Compute the Signal-to-Noise Ratio (SNR) between the original and modified images.\n\n    Parameters:\n    - original: The original image as a 2D numpy array.\n    - modified: The modified (rotated) image as a 2D numpy array.\n\n    Returns:\n    - SNR value as a float.\n    \"\"\"\n    original_normalized = original / 255.0 if original.max() > 1 else original\n    processed_normalized = modified / 255.0 if modified.max() > 1 else modified\n    noise = original_normalized - processed_normalized\n    mean_signal = np.mean(original_normalized)\n    variance_noise = np.var(noise)\n    epsilon = 1e-3\n    snr = 10 * np.log10((mean_signal**2) / (variance_noise + epsilon))\n    return snr",
      "names": [
        {
          "import_components": [
            "numpy",
            "mean"
          ],
          "code_str": "np.mean",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "numpy.mean"
        },
        {
          "import_components": [
            "numpy",
            "var"
          ],
          "code_str": "np.var",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "numpy.var"
        },
        {
          "import_components": [
            "numpy",
            "log10"
          ],
          "code_str": "np.log10",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "numpy.log10"
        }
      ],
      "example": {
        "document": "examples/image_rotation_2D_comparison_scipy",
        "ref_id": "Calculate-Signal-to-Noise-Ratio-(SNR)",
        "headings": [
          "Example of doing an image rotation in 2D and comparing against Scipy",
          "Calculate Signal-to-Noise Ratio (SNR)"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "def calculate_mse(original, modified):\n    \"\"\"\n    Compute the Mean Squared Error (MSE) between the original and modified images.\n\n    Parameters:\n    - original: The original image as a 2D numpy array.\n    - modified: The modified (rotated) image as a 2D numpy array.\n\n    Returns:\n    - MSE value as a float.\n    \"\"\"\n    mse = np.mean((original - modified) ** 2)\n    return mse",
      "names": [
        {
          "import_components": [
            "numpy",
            "mean"
          ],
          "code_str": "np.mean",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "numpy.mean"
        }
      ],
      "example": {
        "document": "examples/image_rotation_2D_comparison_scipy",
        "ref_id": "Calculate-Mean-Squared-Error-(MSE)",
        "headings": [
          "Example of doing an image rotation in 2D and comparing against Scipy",
          "Calculate Mean Squared Error (MSE)"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "def rotate_image_and_crop_splineops(image, angle, degree=3, mode=\"zero\", iterations=1):\n    \"\"\"\n    Rotate an image by a specified angle using the splineops library's TensorSpline method and crop the result.\n\n    Parameters:\n    - image: The input image as a 2D numpy array.\n    - angle: The rotation angle in degrees.\n    - degree: The degree of the spline (0-7).\n    - mode: The mode for handling boundaries (default is \"zero\").\n    - iterations: The number of iterations to apply the rotation.\n\n    Returns:\n    - Rotated image as a 2D numpy array.\n    \"\"\"\n    dtype = image.dtype\n    ny, nx = image.shape\n    xx = np.linspace(0, nx - 1, nx, dtype=dtype)\n    yy = np.linspace(0, ny - 1, ny, dtype=dtype)\n    data = np.ascontiguousarray(image, dtype=dtype)\n    rotated_image = data\n\n    degree = max(0, min(degree, 7))\n    basis = f\"bspline{degree}\"\n\n    for _ in range(iterations):\n        tensor_spline = TensorSpline(\n            data=rotated_image, coordinates=(yy, xx), bases=basis, modes=mode\n        )\n        angle_rad = np.radians(-angle)\n        cos_angle, sin_angle = np.cos(angle_rad), np.sin(angle_rad)\n        original_center_x, original_center_y = (nx - 1) / 2.0, (ny - 1) / 2.0\n        oy, ox = np.ogrid[0:ny, 0:nx]\n        ox = ox - original_center_x\n        oy = oy - original_center_y\n\n        nx_coords = cos_angle * ox + sin_angle * oy + original_center_x\n        ny_coords = -sin_angle * ox + cos_angle * oy + original_center_y\n\n        eval_coords = ny_coords.flatten(), nx_coords.flatten()\n        interpolated_values = tensor_spline(coordinates=eval_coords, grid=False)\n        rotated_image = interpolated_values.reshape(ny, nx)\n\n    return rotated_image",
      "names": [
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "numpy",
            "ascontiguousarray"
          ],
          "code_str": "np.ascontiguousarray",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "numpy.ascontiguousarray"
        },
        {
          "import_components": [
            "min"
          ],
          "code_str": "min",
          "lineno": 22,
          "end_lineno": 22,
          "context": "none",
          "resolved_location": "min"
        },
        {
          "import_components": [
            "max"
          ],
          "code_str": "max",
          "lineno": 22,
          "end_lineno": 22,
          "context": "none",
          "resolved_location": "max"
        },
        {
          "import_components": [
            "range"
          ],
          "code_str": "range",
          "lineno": 25,
          "end_lineno": 25,
          "context": "none",
          "resolved_location": "range"
        },
        {
          "import_components": [
            "splineops",
            "interpolate",
            "tensorspline",
            "TensorSpline"
          ],
          "code_str": "TensorSpline",
          "lineno": 26,
          "end_lineno": 26,
          "context": "none",
          "resolved_location": "splineops.interpolate.tensorspline.TensorSpline"
        },
        {
          "import_components": [
            "splineops",
            "interpolate",
            "tensorspline",
            "TensorSpline",
            "()"
          ],
          "code_str": "tensor_spline",
          "lineno": 26,
          "end_lineno": 26,
          "context": "none",
          "resolved_location": "splineops.interpolate.tensorspline.TensorSpline"
        },
        {
          "import_components": [
            "numpy",
            "radians"
          ],
          "code_str": "np.radians",
          "lineno": 29,
          "end_lineno": 29,
          "context": "none",
          "resolved_location": "numpy.radians"
        },
        {
          "import_components": [
            "numpy",
            "cos"
          ],
          "code_str": "np.cos",
          "lineno": 30,
          "end_lineno": 30,
          "context": "none",
          "resolved_location": "numpy.cos"
        },
        {
          "import_components": [
            "numpy",
            "sin"
          ],
          "code_str": "np.sin",
          "lineno": 30,
          "end_lineno": 30,
          "context": "none",
          "resolved_location": "numpy.sin"
        },
        {
          "import_components": [
            "numpy",
            "ogrid"
          ],
          "code_str": "np.ogrid",
          "lineno": 32,
          "end_lineno": 32,
          "context": "none",
          "resolved_location": "numpy.ogrid"
        },
        {
          "import_components": [
            "splineops",
            "interpolate",
            "tensorspline",
            "TensorSpline",
            "()"
          ],
          "code_str": "tensor_spline",
          "lineno": 40,
          "end_lineno": 40,
          "context": "none",
          "resolved_location": "splineops.interpolate.tensorspline.TensorSpline"
        }
      ],
      "example": {
        "document": "examples/image_rotation_2D_comparison_scipy",
        "ref_id": "Rotate-Image-and-Crop-using-SplineOps",
        "headings": [
          "Example of doing an image rotation in 2D and comparing against Scipy",
          "Rotate Image and Crop using SplineOps"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "def rotate_image_and_crop_scipy(image, angle, order=3, iterations=5):\n    \"\"\"\n    Rotate an image by a specified angle using SciPy's ndimage.rotate function and crop the result.\n\n    Parameters:\n    - image: The input image as a 2D numpy array.\n    - angle: The rotation angle in degrees.\n    - order: The order of the spline (0-5).\n    - iterations: The number of iterations to apply the rotation.\n\n    Returns:\n    - Rotated image as a 2D numpy array.\n    \"\"\"\n    rotated_image = image.copy()\n    for _ in range(iterations):\n        rotated_image = ndimage.rotate(\n            rotated_image, angle, reshape=False, order=order, mode=\"constant\", cval=0\n        )\n    return rotated_image",
      "names": [
        {
          "import_components": [
            "range"
          ],
          "code_str": "range",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "range"
        },
        {
          "import_components": [
            "scipy",
            "ndimage",
            "rotate"
          ],
          "code_str": "ndimage.rotate",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "scipy.ndimage.rotate"
        }
      ],
      "example": {
        "document": "examples/image_rotation_2D_comparison_scipy",
        "ref_id": "Rotate-Image-and-Crop-using-SciPy",
        "headings": [
          "Example of doing an image rotation in 2D and comparing against Scipy",
          "Rotate Image and Crop using SciPy"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "def benchmark_and_display_rotation(image, angle, degree, iterations):\n    \"\"\"\n    Perform a benchmark of the rotation operation for both splineops and SciPy libraries and display images.\n\n    Parameters:\n    - image: The input image as a 2D numpy array.\n    - angle: The rotation angle in degrees.\n    - degree: The degree of the spline (0-7).\n    - iterations: The number of iterations to apply the rotation.\n    \"\"\"\n    start_time_custom = time.time()\n    custom_rotated_and_cropped_splineops = rotate_image_and_crop_splineops(\n        image, angle, degree=degree, mode=\"zero\", iterations=iterations\n    )\n    time_custom = time.time() - start_time_custom\n\n    start_time_scipy = time.time()\n    scipy_rotated_and_cropped = rotate_image_and_crop_scipy(\n        image, angle, order=degree, iterations=iterations\n    )\n    time_scipy = time.time() - start_time_scipy\n\n    bounds = calculate_inscribed_rectangle_bounds_from_image(image)\n    image_cropped = crop_image_to_bounds(image, bounds)\n    custom_rotated_and_cropped_splineops = crop_image_to_bounds(\n        custom_rotated_and_cropped_splineops, bounds\n    )\n    scipy_rotated_and_cropped = crop_image_to_bounds(scipy_rotated_and_cropped, bounds)\n\n    snr_splineops = calculate_snr(image_cropped, custom_rotated_and_cropped_splineops)\n    snr_scipy = calculate_snr(image_cropped, scipy_rotated_and_cropped)\n    mse_splineops = calculate_mse(image_cropped, custom_rotated_and_cropped_splineops)\n    mse_scipy = calculate_mse(image_cropped, scipy_rotated_and_cropped)\n\n    fig, axes = plt.subplots(nrows=3, ncols=1, figsize=(10, 20))\n    axes[0].imshow(image_cropped, cmap=\"gray\")\n    axes[0].set_title(\"Original Image\")\n    axes[1].imshow(custom_rotated_and_cropped_splineops, cmap=\"gray\")\n    axes[1].set_title(\n        f\"SplineOps Rotated\\nSNR: {snr_splineops:.2f}dB, MSE: {mse_splineops:.2e}\\nAngle: {angle}\u00b0, Iter: {iterations}\\nDegree: {degree}, Time: {time_custom:.2f}s\"\n    )\n    axes[2].imshow(scipy_rotated_and_cropped, cmap=\"gray\")\n    axes[2].set_title(\n        f\"SciPy Rotated\\nSNR: {snr_scipy:.2f}dB, MSE: {mse_scipy:.2e}\\nAngle: {angle}\u00b0, Iter: {iterations}\\nDegree: {degree}, Time: {time_scipy:.2f}s\"\n    )\n\n    plt.tight_layout()\n    plt.subplots_adjust(hspace=0.4, top=0.95, bottom=0.05)\n    plt.show()",
      "names": [
        {
          "import_components": [
            "time",
            "time"
          ],
          "code_str": "time.time",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "time.time"
        },
        {
          "import_components": [
            "time",
            "time"
          ],
          "code_str": "time.time",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "time.time"
        },
        {
          "import_components": [
            "time",
            "time"
          ],
          "code_str": "time.time",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "time.time"
        },
        {
          "import_components": [
            "time",
            "time"
          ],
          "code_str": "time.time",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "time.time"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 35,
          "end_lineno": 35,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "tight_layout"
          ],
          "code_str": "plt.tight_layout",
          "lineno": 47,
          "end_lineno": 47,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.tight_layout"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots_adjust"
          ],
          "code_str": "plt.subplots_adjust",
          "lineno": 48,
          "end_lineno": 48,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots_adjust"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "show"
          ],
          "code_str": "plt.show",
          "lineno": 49,
          "end_lineno": 49,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.show"
        }
      ],
      "example": {
        "document": "examples/image_rotation_2D_comparison_scipy",
        "ref_id": "Benchmark-and-Display-Rotation",
        "headings": [
          "Example of doing an image rotation in 2D and comparing against Scipy",
          "Benchmark and Display Rotation"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "# Image size, Rotation angle and iterations and degree of spline interpolation\nsize = 1000\nangle = 72  # 72\niterations = 5  # 5\ndegree = 3\n\n# Load and resize the ascent image\nimage = datasets.ascent()\nimage_resized = ndimage.zoom(\n    image, (size / image.shape[0], size / image.shape[1]), order=degree\n)\n\n# Convert to float32\nimage_resized = image_resized.astype(np.float32)\n\n# Benchmark and display rotation results\nbenchmark_and_display_rotation(image_resized, angle, degree, iterations)",
      "names": [
        {
          "import_components": [
            "scipy",
            "datasets",
            "ascent"
          ],
          "code_str": "datasets.ascent",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "scipy.datasets.ascent"
        },
        {
          "import_components": [
            "scipy",
            "ndimage",
            "zoom"
          ],
          "code_str": "ndimage.zoom",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "scipy.ndimage.zoom"
        },
        {
          "import_components": [
            "numpy",
            "float32"
          ],
          "code_str": "np.float32",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "numpy.float32"
        }
      ],
      "example": {
        "document": "examples/image_rotation_2D_comparison_scipy",
        "ref_id": "Load-Image-and-Perform-Rotations",
        "headings": [
          "Example of doing an image rotation in 2D and comparing against Scipy",
          "Load Image and Perform Rotations"
        ]
      },
      "doc_lineno": null
    }
  ],
  "examples/index": [],
  "examples/tensorspline_api_call": [
    {
      "source": "#!/usr/bin/env python3\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom splineops.interpolate.tensorspline import TensorSpline",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "splineops",
            "interpolate",
            "tensorspline"
          ],
          "code_str": "splineops.interpolate.tensorspline",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "splineops.interpolate.tensorspline"
        },
        {
          "import_components": [
            "splineops",
            "interpolate",
            "tensorspline",
            "TensorSpline"
          ],
          "code_str": "TensorSpline",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "splineops.interpolate.tensorspline.TensorSpline"
        }
      ],
      "example": {
        "document": "examples/tensorspline_api_call",
        "ref_id": "Example-of-using-the-TensorSpline-API",
        "headings": [
          "Example of using the TensorSpline API"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "dtype = \"float32\"\n\nnx, ny = 2, 5\nxmin, xmax = -3.1, +1\nymin, ymax = 2, 6.5\nxx = np.linspace(xmin, xmax, nx, dtype=dtype)\nyy = np.linspace(ymin, ymax, ny, dtype=dtype)\ncoordinates = xx, yy\nprng = np.random.default_rng(seed=5250)\ndata = prng.standard_normal(size=tuple(c.size for c in coordinates))\ndata = np.ascontiguousarray(data, dtype=dtype)",
      "names": [
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "default_rng"
          ],
          "code_str": "np.random.default_rng",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "numpy.random.default_rng"
        },
        {
          "import_components": [
            "tuple"
          ],
          "code_str": "tuple",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "tuple"
        },
        {
          "import_components": [
            "numpy",
            "ascontiguousarray"
          ],
          "code_str": "np.ascontiguousarray",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "numpy.ascontiguousarray"
        }
      ],
      "example": {
        "document": "examples/tensorspline_api_call",
        "ref_id": "Data-Preparation",
        "headings": [
          "Example of using the TensorSpline API",
          "Data Preparation"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "bases = \"bspline3\"  # same basis applied to all dimensions\nmodes = \"mirror\"  # same mode applied to all dimensions\n\ntensor_spline = TensorSpline(\n    data=data, coordinates=coordinates, bases=bases, modes=modes\n)",
      "names": [
        {
          "import_components": [
            "splineops",
            "interpolate",
            "tensorspline",
            "TensorSpline"
          ],
          "code_str": "TensorSpline",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "splineops.interpolate.tensorspline.TensorSpline"
        },
        {
          "import_components": [
            "splineops",
            "interpolate",
            "tensorspline",
            "TensorSpline",
            "()"
          ],
          "code_str": "tensor_spline",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "splineops.interpolate.tensorspline.TensorSpline"
        }
      ],
      "example": {
        "document": "examples/tensorspline_api_call",
        "ref_id": "Tensor-Spline-Setup",
        "headings": [
          "Example of using the TensorSpline API",
          "Tensor Spline Setup"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "dx = (xx[-1] - xx[0]) / (nx - 1)\ndy = (yy[-1] - yy[0]) / (ny - 1)\npad_fct = 1.1\npx = pad_fct * nx * dx\npy = pad_fct * ny * dy\neval_xx = np.linspace(xx[0] - px, xx[-1] + px, 100 * nx)\neval_yy = np.linspace(yy[0] - py, yy[-1] + py, 100 * ny)",
      "names": [
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.linspace"
        }
      ],
      "example": {
        "document": "examples/tensorspline_api_call",
        "ref_id": "Evaluation-Coordinates",
        "headings": [
          "Example of using the TensorSpline API",
          "Evaluation Coordinates"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "eval_coords = eval_xx, eval_yy\ndata_eval = tensor_spline(coordinates=eval_coords)",
      "names": [
        {
          "import_components": [
            "splineops",
            "interpolate",
            "tensorspline",
            "TensorSpline",
            "()"
          ],
          "code_str": "tensor_spline",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "splineops.interpolate.tensorspline.TensorSpline"
        }
      ],
      "example": {
        "document": "examples/tensorspline_api_call",
        "ref_id": "Standard-Evaluation",
        "headings": [
          "Example of using the TensorSpline API",
          "Standard Evaluation"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "eval_coords_mg = np.meshgrid(*eval_coords, indexing=\"ij\")\ndata_eval_mg = tensor_spline(coordinates=eval_coords_mg, grid=False)\nnp.testing.assert_equal(data_eval, data_eval_mg)",
      "names": [
        {
          "import_components": [
            "numpy",
            "meshgrid"
          ],
          "code_str": "np.meshgrid",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "numpy.meshgrid"
        },
        {
          "import_components": [
            "splineops",
            "interpolate",
            "tensorspline",
            "TensorSpline",
            "()"
          ],
          "code_str": "tensor_spline",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "splineops.interpolate.tensorspline.TensorSpline"
        },
        {
          "import_components": [
            "numpy",
            "testing",
            "assert_equal"
          ],
          "code_str": "np.testing.assert_equal",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "numpy.testing.assert_equal"
        }
      ],
      "example": {
        "document": "examples/tensorspline_api_call",
        "ref_id": "Meshgrid-Evaluation",
        "headings": [
          "Example of using the TensorSpline API",
          "Meshgrid Evaluation"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "eval_coords_pts = np.reshape(eval_coords_mg, newshape=(2, -1))\ndata_eval_pts = tensor_spline(coordinates=eval_coords_pts, grid=False)\nnp.testing.assert_equal(data_eval, np.reshape(data_eval_pts, data_eval_mg.shape))",
      "names": [
        {
          "import_components": [
            "numpy",
            "reshape"
          ],
          "code_str": "np.reshape",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "numpy.reshape"
        },
        {
          "import_components": [
            "splineops",
            "interpolate",
            "tensorspline",
            "TensorSpline",
            "()"
          ],
          "code_str": "tensor_spline",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "splineops.interpolate.tensorspline.TensorSpline"
        },
        {
          "import_components": [
            "numpy",
            "reshape"
          ],
          "code_str": "np.reshape",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "numpy.reshape"
        },
        {
          "import_components": [
            "numpy",
            "testing",
            "assert_equal"
          ],
          "code_str": "np.testing.assert_equal",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "numpy.testing.assert_equal"
        }
      ],
      "example": {
        "document": "examples/tensorspline_api_call",
        "ref_id": "Points-Evaluation",
        "headings": [
          "Example of using the TensorSpline API",
          "Points Evaluation"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "fig: plt.Figure\nax: plt.Axes\n\nextent = [xx[0] - dx / 2, xx[-1] + dx / 2, yy[0] - dy / 2, yy[-1] + dy / 2]\neval_extent = [\n    eval_xx[0] - dx / 2,\n    eval_xx[-1] + dx / 2,\n    eval_yy[0] - dy / 2,\n    eval_yy[-1] + dy / 2,\n]\n\nfig, axes = plt.subplots(\n    nrows=1, ncols=2, sharex=\"all\", sharey=\"all\", layout=\"constrained\"\n)\nax = axes[0]\nax.imshow(data.T, extent=extent)\nax.set_title(\"Original data samples\")\nax = axes[1]\nax.imshow(data_eval.T, extent=eval_extent)\nax.set_title(\"Interpolated data\")\n\nplt.show()",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "Figure"
          ],
          "code_str": "plt.Figure",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "matplotlib.figure.Figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "Figure",
            "()"
          ],
          "code_str": "fig",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "matplotlib.figure.Figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "Axes"
          ],
          "code_str": "plt.Axes",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "matplotlib.axes._axes.Axes"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "Axes",
            "()"
          ],
          "code_str": "ax",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "matplotlib.axes._axes.Axes"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "show"
          ],
          "code_str": "plt.show",
          "lineno": 22,
          "end_lineno": 22,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.show"
        }
      ],
      "example": {
        "document": "examples/tensorspline_api_call",
        "ref_id": "Visualization",
        "headings": [
          "Example of using the TensorSpline API",
          "Visualization"
        ]
      },
      "doc_lineno": null
    }
  ],
  "examples/test_interaction": [
    {
      "source": "from mpl_toolkits.mplot3d import axes3d\nimport matplotlib.pyplot as plt\nfrom numpy.random import rand\nfrom IPython.display import HTML, display\nfrom matplotlib import animation\n\nm = rand(3,3) # m is an array of (x,y,z) coordinate triplets\n\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\n\nfor i in range(len(m)): # plot each point + it's index as text above\n  x = m[i,0]\n  y = m[i,1]\n  z = m[i,2]\n  label = i\n  ax.scatter(x, y, z, color='b')\n  ax.text(x, y, z, '%s' % (label), size=20, zorder=1, color='k')\n\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z')\n\ndef animate(frame):\n  ax.view_init(30, frame/4)\n  return fig\n\nanim = animation.FuncAnimation(fig, animate, frames=200, interval=50)\nplt.close(fig)  # Prevents the initial still image from displaying\ndisplay(HTML(anim.to_html5_video()))",
      "names": [
        {
          "import_components": [
            "mpl_toolkits",
            "mplot3d"
          ],
          "code_str": "mpl_toolkits.mplot3d",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "mpl_toolkits.mplot3d"
        },
        {
          "import_components": [
            "mpl_toolkits",
            "mplot3d",
            "axes3d"
          ],
          "code_str": "axes3d",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "mpl_toolkits.mplot3d.axes3d"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "numpy",
            "random"
          ],
          "code_str": "numpy.random",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "numpy.random"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "rand"
          ],
          "code_str": "rand",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "numpy.random.rand"
        },
        {
          "import_components": [
            "matplotlib"
          ],
          "code_str": "matplotlib",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_from",
          "resolved_location": "matplotlib"
        },
        {
          "import_components": [
            "matplotlib",
            "animation"
          ],
          "code_str": "animation",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "matplotlib.animation"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "rand"
          ],
          "code_str": "rand",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.random.rand"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure",
            "()"
          ],
          "code_str": "fig",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "matplotlib.figure.Figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure",
            "()",
            "add_subplot"
          ],
          "code_str": "fig.add_subplot",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "matplotlib.figure.Figure.add_subplot"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "len"
        },
        {
          "import_components": [
            "range"
          ],
          "code_str": "range",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "range"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure",
            "()"
          ],
          "code_str": "fig",
          "lineno": 26,
          "end_lineno": 26,
          "context": "none",
          "resolved_location": "matplotlib.figure.Figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure",
            "()"
          ],
          "code_str": "fig",
          "lineno": 28,
          "end_lineno": 28,
          "context": "none",
          "resolved_location": "matplotlib.figure.Figure"
        },
        {
          "import_components": [
            "matplotlib",
            "animation",
            "FuncAnimation"
          ],
          "code_str": "animation.FuncAnimation",
          "lineno": 28,
          "end_lineno": 28,
          "context": "none",
          "resolved_location": "matplotlib.animation.FuncAnimation"
        },
        {
          "import_components": [
            "matplotlib",
            "animation",
            "FuncAnimation",
            "()"
          ],
          "code_str": "anim",
          "lineno": 28,
          "end_lineno": 28,
          "context": "none",
          "resolved_location": "matplotlib.animation.FuncAnimation"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure",
            "()"
          ],
          "code_str": "fig",
          "lineno": 29,
          "end_lineno": 29,
          "context": "none",
          "resolved_location": "matplotlib.figure.Figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "close"
          ],
          "code_str": "plt.close",
          "lineno": 29,
          "end_lineno": 29,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.close"
        },
        {
          "import_components": [
            "matplotlib",
            "animation",
            "FuncAnimation",
            "()",
            "to_html5_video"
          ],
          "code_str": "anim.to_html5_video",
          "lineno": 30,
          "end_lineno": 30,
          "context": "none",
          "resolved_location": "matplotlib.animation.Animation.to_html5_video"
        }
      ],
      "example": {
        "document": "examples/test_interaction",
        "ref_id": "Example-of-using-interactive-Python-widgets",
        "headings": [
          "Example of using interactive Python widgets"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.animation as animation\nfrom IPython.display import HTML, display\n\n# Create a figure and axis\nfig, ax = plt.subplots()\nx = np.linspace(0, 2*np.pi, 100)\nline, = ax.plot(x, np.sin(x))\n\n# Animation function\ndef animate(i):\n    line.set_ydata(np.sin(x + i/10.0))  # Update the data\n    return line,\n\n# Create the animation\nani = animation.FuncAnimation(fig, animate, frames=100, interval=20, blit=True)\nplt.close(fig)  # Prevents the initial still image from displaying\n\n# Generate the animation HTML\nhtml = ani.to_jshtml()\n\n# Custom JavaScript to modify the control buttons\ncustom_js = \"\"\"\n<script>\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    function modifyControls() {\n        const controls = document.getElementsByClassName('anim-buttons')[0];\n        if (controls) {\n            // Clear existing buttons\n            while (controls.firstChild) {\n                controls.removeChild(controls.firstChild);\n            }\n            // Create custom buttons\n            const playButton = document.createElement('button');\n            playButton.innerHTML = 'Play';\n            playButton.onclick = function() { animator._toggle_animation(); };\n\n            const prevButton = document.createElement('button');\n            prevButton.innerHTML = 'Previous Frame';\n            prevButton.onclick = function() { animator._step(-1); };\n\n            const nextButton = document.createElement('button');\n            nextButton.innerHTML = 'Next Frame';\n            nextButton.onclick = function() { animator._step(1); };\n\n            controls.appendChild(prevButton);\n            controls.appendChild(playButton);\n            controls.appendChild(nextButton);\n        } else {\n            // Retry if the controls are not yet available\n            setTimeout(modifyControls, 100);\n        }\n    }\n    modifyControls();\n});\n</script>\n\"\"\"\n\n# Display the customized animation\ndisplay(HTML(html + custom_js))",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "matplotlib",
            "animation"
          ],
          "code_str": "matplotlib.animation",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "matplotlib.animation"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "numpy",
            "sin"
          ],
          "code_str": "np.sin",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "numpy.sin"
        },
        {
          "import_components": [
            "numpy",
            "sin"
          ],
          "code_str": "np.sin",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "numpy.sin"
        },
        {
          "import_components": [
            "matplotlib",
            "animation",
            "FuncAnimation"
          ],
          "code_str": "animation.FuncAnimation",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "matplotlib.animation.FuncAnimation"
        },
        {
          "import_components": [
            "matplotlib",
            "animation",
            "FuncAnimation",
            "()"
          ],
          "code_str": "ani",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "matplotlib.animation.FuncAnimation"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "close"
          ],
          "code_str": "plt.close",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.close"
        },
        {
          "import_components": [
            "matplotlib",
            "animation",
            "FuncAnimation",
            "()",
            "to_jshtml"
          ],
          "code_str": "ani.to_jshtml",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "matplotlib.animation.Animation.to_jshtml"
        }
      ],
      "example": {
        "document": "examples/test_interaction",
        "ref_id": "Example-of-using-interactive-Python-widgets",
        "headings": [
          "Example of using interactive Python widgets"
        ]
      },
      "doc_lineno": null
    }
  ],
  "index": [],
  "user-guide/development_environment": [],
  "user-guide/formatting_type_checking_testing": [],
  "user-guide/index": [],
  "user-guide/installation": [],
  "user-guide/packaging": []
}